image: docker:latest

services:
  - docker:dind

stages:
- build
- deploy

variables:
  #CONTAINER_TEST_IMAGE: my-docker-hub/$CI_PROJECT_ID:$CI_BUILD_REF_NAME_test
  # The following variables are setup via gitlab project group:
  # DOCKER_HUB_TOKEN
  # DOCKER_USERNAME
  # DOCKER_PASSWORD
  # INTERNAL_REGISTRY_HOST
  # INTERNAL_REGISTRY_USER
  # INTERNAL_REGISTRY_PW
  VERSION: "1.0-alpine"

before_script:
- apk add --no-cache make bash sudo git
- docker login -u "$INTERNAL_REGISTRY_USER" -p "$INTERNAL_REGISTRY_PW" "$INTERNAL_REGISTRY_HOST"
#- make install

include:
  - '.legacy/.gitlab-ci.yml'
  - '1.0-alpine/.gitlab-ci.yml'
  - '1.1-alpine/.gitlab-ci.yml'

.build:
  stage: build
  only: 
  - master  
  script:
  - make build v=$VERSION
  - make tags
  - make push


# deactivated:
.container_scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
    CI_CONTAINER_NAME: misp-dockerized-postfix
    CI_APPLICATION_REPOSITORY: $INTERNAL_REGISTRY_HOST/$CI_CONTAINER_NAME
    CI_APPLICATION_TAG: latest-dev
  allow_failure: true
  #services:
    #- docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - docker ps
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    #- while( ! wget -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; done
    #- retries=0
    - docker ps -a
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://localhost:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    paths: [gl-container-scanning-report.json]


.upload_image_internal_registry:
  stage: deploy
  only: 
  - master
  script:
    - echo "$INTERNAL_REGISTRY_PW" | docker login -u "$INTERNAL_REGISTRY_USER" --password-stdin "$INTERNAL_REGISTRY_HOST"
    - make push

.upload_image_hub.docker.com:
  stage: deploy
  only: 
  - master
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - make push


# after_success:
# # notify Docker Hub to make a new build
#   only: master
#   - make notify-hub-docker-com TOKEN=$DOCKER_HUB_TOKEN